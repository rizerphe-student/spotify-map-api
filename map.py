"""A module that generates the map for the spotify artist based searcher."""
import contextlib
import json
from multiprocessing import Pool
from typing import Callable

import folium
import spotify_minimal_client


def get_location(code: str) -> tuple[float, float]:
    """Return the latitude and longitude of a country.

    Args:
        code (str): The country code.

    Returns:
        tuple[float, float]: The latitude and longitude of the country.
    """
    with open("countries.json", "r", encoding="utf-8") as file:
        return json.load(file)[code]


def get_marker(code, get_label):
    with contextlib.suppress(KeyError):
        label = get_label(code)
    if label is None:
        return None
    country_info = folium.Html(f"<b>{label}</b>", script=True)
    popup = folium.Popup(country_info, max_width=200, show=True)
    marker = folium.Marker(location=get_location(code), popup=popup)
    return marker


def generate_map(
    codes: list[str],
    get_label: Callable[[str], str | None],
) -> str:
    """Generate a Folium map with markers for each country in the given
    list of two-letter codes. The label for each marker is generated by
    the provided `get_label` function.

    Args:
        codes (list[str]): A list of two-letter country codes.
        get_label (Callable[[str], str]): A function that takes a
            two-letter country code and returns a label for the marker.

    Returns:
        str: The HTML code for the map.
    """
    map_center = [0, 0]
    folium_map = folium.Map(location=map_center, zoom_start=2)

    with Pool() as pool:
        markers = pool.starmap(get_marker, [(code, get_label) for code in codes])

    for marker in markers:
        if marker is not None:
            marker.add_to(folium_map)

    return folium_map.get_root().render()


class TopTrackNameGetter:
    """Get the top track name for a specific artist"""

    def __init__(self, artist: spotify_minimal_client.artist.Artist):
        self.artist = artist

    def __call__(self, code: str) -> str | None:
        """Return the name of the top track for the artist in the given
        country.

        Args:
            code (str): The country code.

        Returns:
            str | None: The name of the top track for the artist in the
                given country, or None if the artist has no top track in
                the given country.
        """
        top_tracks = self.artist.top_tracks(code)
        if not top_tracks:
            return None
        return top_tracks[0].name


def map_for_artist(client: spotify_minimal_client.Spotify, query: str) -> str | None:
    """Return an HTML map that shows the top song for each artist in
    each country

    Args:
        client (spotify_minimal_client.Spotify): The Spotify client.
        query (str): The artist name to search for.

    Returns:
        The HTML code for the map, or None if no artist was found.
    """
    search_results = client.artists.search(query)
    if not search_results:
        return None
    artist = search_results[0]
    return generate_map(
        codes=client.markets.as_list(),
        get_label=TopTrackNameGetter(artist),
    )
